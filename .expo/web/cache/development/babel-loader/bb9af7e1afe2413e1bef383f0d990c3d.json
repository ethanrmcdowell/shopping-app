{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_TO_CART } from \"../actions/cart\";\nimport CartItem from \"../../models/cart-item\";\nvar initialState = {\n  items: {},\n  totalAmount: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      var addedProduct = action.product;\n      var prodPrice = addedProduct.price;\n      var prodTitle = addedProduct.title;\n      var updatedOrNewCartItem;\n\n      if (state.items[addedProduct.id]) {\n        updatedOrNewCartItem = new CartItem(state.items[addedProduct.id].quantity + 1, prodPrice, prodTitle, state.items[addedProduct.id].sum + prodPrice);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, addedProduct.id, updatedCartItem)),\n          totalAmount: state.totalAmount + prodPrice\n        });\n      } else {\n        updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, addedProduct.id, updatedOrNewCartItem)),\n          totalAmount: state.totalAmount + prodPrice\n        });\n      }\n\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/ethanmcdowell/React Native/shopping-app/store/reducers/cart.js"],"names":["ADD_TO_CART","CartItem","initialState","items","totalAmount","state","action","type","addedProduct","product","prodPrice","price","prodTitle","title","updatedOrNewCartItem","id","quantity","sum","updatedCartItem"],"mappings":";;;;;;AAAA,SAASA,WAAT;AACA,OAAOC,QAAP;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;AAKA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,WAAL;AACE,UAAMQ,YAAY,GAAGF,MAAM,CAACG,OAA5B;AACA,UAAMC,SAAS,GAAGF,YAAY,CAACG,KAA/B;AACA,UAAMC,SAAS,GAAGJ,YAAY,CAACK,KAA/B;AAEA,UAAIC,oBAAJ;;AAEA,UAAIT,KAAK,CAACF,KAAN,CAAYK,YAAY,CAACO,EAAzB,CAAJ,EAAkC;AAEhCD,QAAAA,oBAAoB,GAAG,IAAIb,QAAJ,CACrBI,KAAK,CAACF,KAAN,CAAYK,YAAY,CAACO,EAAzB,EAA6BC,QAA7B,GAAwC,CADnB,EAErBN,SAFqB,EAGrBE,SAHqB,EAIrBP,KAAK,CAACF,KAAN,CAAYK,YAAY,CAACO,EAAzB,EAA6BE,GAA7B,GAAmCP,SAJd,CAAvB;AAMA,+CACKL,KADL;AAEEF,UAAAA,KAAK,kCAAOE,KAAK,CAACF,KAAb,2BAAqBK,YAAY,CAACO,EAAlC,EAAuCG,eAAvC,EAFP;AAGEd,UAAAA,WAAW,EAAEC,KAAK,CAACD,WAAN,GAAoBM;AAHnC;AAKD,OAbD,MAaO;AACLI,QAAAA,oBAAoB,GAAG,IAAIb,QAAJ,CAAa,CAAb,EAAgBS,SAAhB,EAA2BE,SAA3B,EAAsCF,SAAtC,CAAvB;AACA,+CACKL,KADL;AAEEF,UAAAA,KAAK,kCAAOE,KAAK,CAACF,KAAb,2BAAqBK,YAAY,CAACO,EAAlC,EAAuCD,oBAAvC,EAFP;AAGEV,UAAAA,WAAW,EAAEC,KAAK,CAACD,WAAN,GAAoBM;AAHnC;AAKD;;AA5BL;;AA8BA,SAAOL,KAAP;AACD,CAhCD","sourcesContent":["import { ADD_TO_CART } from '../actions/cart';\nimport CartItem from '../../models/cart-item';\n\nconst initialState = {\n  items: {},\n  totalAmount: 0,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      const addedProduct = action.product;\n      const prodPrice = addedProduct.price;\n      const prodTitle = addedProduct.title;\n\n      let updatedOrNewCartItem;\n\n      if (state.items[addedProduct.id]) {\n        // already have item in the cart\n        updatedOrNewCartItem = new CartItem(\n          state.items[addedProduct.id].quantity + 1,\n          prodPrice,\n          prodTitle,\n          state.items[addedProduct.id].sum + prodPrice\n        );\n        return {\n          ...state,\n          items: { ...state.items, [addedProduct.id]: updatedCartItem },\n          totalAmount: state.totalAmount + prodPrice,\n        };\n      } else {\n        updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\n        return {\n          ...state,\n          items: { ...state.items, [addedProduct.id]: updatedOrNewCartItem },\n          totalAmount: state.totalAmount + prodPrice,\n        };\n      }\n  }\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}